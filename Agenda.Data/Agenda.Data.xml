<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Agenda.Data</name>
    </assembly>
    <members>
        <member name="T:Agenda.Data.Crud.AgendaData">
            <summary>
            Data access.
            </summary>
            <seealso cref="T:Agenda.Data.Crud.IAgendaData"/>
            <summary>
            CRUD operations for Committees.
            </summary>
            <summary>
            CRUD operations for Location.
            </summary>
            <summary>
            CRUD operations for Meetings.
            </summary>
            <summary>
            CRUD operations for Organisations.
            </summary>
        </member>
        <member name="M:Agenda.Data.Crud.AgendaData.#ctor(Microsoft.Extensions.Logging.ILogger{Agenda.Data.Crud.AgendaData},Agenda.Data.DbContexts.DataContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Agenda.Data.Crud.AgendaData"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="dataContext">Data Context.</param>
        </member>
        <member name="M:Agenda.Data.Crud.AgendaData.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Agenda.Data.Crud.AgendaData.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Agenda.Data.Crud.AgendaData.Tag(Agenda.Utilities.Models.Whos.IWho,System.String)">
            <summary>
            Returns tag for use with .TagWith().
            </summary>
            <param name="who">Who details.</param>
            <param name="methodName">Method Name.</param>
            <returns>Tag.</returns>
        </member>
        <member name="M:Agenda.Data.Crud.AgendaData.CreateCommitteeAsync(Agenda.Utilities.Models.Whos.IWho,Agenda.Domain.DomainObjects.Committees.ICommittee)">
            <inheritdoc/>
        </member>
        <member name="M:Agenda.Data.Crud.AgendaData.GetCommitteeByIdAsync(Agenda.Utilities.Models.Whos.IWho,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:Agenda.Data.Crud.AgendaData.GetCommitteeByIdWithMeetingsAsync(Agenda.Utilities.Models.Whos.IWho,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Agenda.Data.Crud.AgendaData.HaveCommitteesAsync(Agenda.Utilities.Models.Whos.IWho)">
            <inheritdoc/>
        </member>
        <member name="M:Agenda.Data.Crud.AgendaData.UpdateCommitteeAsync(Agenda.Utilities.Models.Whos.IWho,Agenda.Domain.DomainObjects.Committees.ICommittee)">
            <inheritdoc/>
        </member>
        <member name="M:Agenda.Data.Crud.AgendaData.CreateLocationAsync(Agenda.Utilities.Models.Whos.IWho,Agenda.Domain.DomainObjects.Locations.ILocation)">
            <inheritdoc/>
        </member>
        <member name="M:Agenda.Data.Crud.AgendaData.GetLocationByIdAsync(Agenda.Utilities.Models.Whos.IWho,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:Agenda.Data.Crud.AgendaData.UpdateLocationAsync(Agenda.Utilities.Models.Whos.IWho,Agenda.Domain.DomainObjects.Locations.ILocation)">
            <inheritdoc/>
        </member>
        <member name="M:Agenda.Data.Crud.AgendaData.CreateMeetingAsync(Agenda.Utilities.Models.Whos.IWho,Agenda.Domain.DomainObjects.Meetings.IMeeting)">
            <inheritdoc/>
        </member>
        <member name="M:Agenda.Data.Crud.AgendaData.GetRecentMeetingsMostRecentFirstAsync(Agenda.Utilities.Models.Whos.IWho,System.TimeSpan,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Agenda.Data.Crud.AgendaData.GetMeetingByIdAsync(Agenda.Utilities.Models.Whos.IWho,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Agenda.Data.Crud.AgendaData.UpdateMeetingAsync(Agenda.Utilities.Models.Whos.IWho,Agenda.Domain.DomainObjects.Meetings.IMeeting)">
            <inheritdoc/>
        </member>
        <member name="M:Agenda.Data.Crud.AgendaData.CreateOrganisationAsync(Agenda.Utilities.Models.Whos.IWho,Agenda.Domain.DomainObjects.Organisations.IOrganisation)">
            <inheritdoc />
        </member>
        <member name="M:Agenda.Data.Crud.AgendaData.GetAllOrganisationsAsync(Agenda.Utilities.Models.Whos.IWho)">
            <inheritdoc />
        </member>
        <member name="M:Agenda.Data.Crud.AgendaData.GetOrganisationByIdAsync(Agenda.Utilities.Models.Whos.IWho,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Agenda.Data.Crud.AgendaData.GetOrganisationByIdWithCommitteesAsync(Agenda.Utilities.Models.Whos.IWho,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:Agenda.Data.Crud.AgendaData.GetOrganisationByIdWithLocationsAsync(Agenda.Utilities.Models.Whos.IWho,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:Agenda.Data.Crud.AgendaData.GetOrganisationByCommitteeIdWithLocationsAsync(Agenda.Utilities.Models.Whos.IWho,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:Agenda.Data.Crud.AgendaData.GetOrganisationByMeetingIdWithLocationsAsync(Agenda.Utilities.Models.Whos.IWho,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:Agenda.Data.Crud.AgendaData.HaveOrganisationsAsync(Agenda.Utilities.Models.Whos.IWho)">
            <inheritdoc/>
        </member>
        <member name="M:Agenda.Data.Crud.AgendaData.UpdateOrganisationAsync(Agenda.Utilities.Models.Whos.IWho,Agenda.Domain.DomainObjects.Organisations.IOrganisation)">
            <inheritdoc/>
        </member>
        <member name="T:Agenda.Data.Crud.IAgendaData">
            <summary>
            Data access - Committee.
            </summary>
            <summary>
            Data access.
            </summary>
            <summary>
            Data access.
            </summary>
            <summary>
            Data access.
            </summary>
        </member>
        <member name="M:Agenda.Data.Crud.IAgendaData.CreateCommitteeAsync(Agenda.Utilities.Models.Whos.IWho,Agenda.Domain.DomainObjects.Committees.ICommittee)">
            <summary>
            Creates the Committee.
            </summary>
            <param name="who">Who details.</param>
            <param name="committee">Committee.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Agenda.Data.Crud.IAgendaData.GetCommitteeByIdAsync(Agenda.Utilities.Models.Whos.IWho,System.Guid)">
            <summary>
            Gets the Committee by Id.
            </summary>
            <param name="who">Who details.</param>
            <param name="committeeId">Committee Id.</param>
            <returns>Committee.</returns>
        </member>
        <member name="M:Agenda.Data.Crud.IAgendaData.GetCommitteeByIdWithMeetingsAsync(Agenda.Utilities.Models.Whos.IWho,System.Guid)">
            <summary>
            Gets the Committee by Id with its meetings.
            </summary>
            <param name="who">Who details.</param>
            <param name="committeeId">Committee id.</param>
            <returns>Committee with Meetings.</returns>
        </member>
        <member name="M:Agenda.Data.Crud.IAgendaData.HaveCommitteesAsync(Agenda.Utilities.Models.Whos.IWho)">
            <summary>
            Checks if we have Committees.
            </summary>
            <param name="who">Who details.</param>
            <returns>True if Committees exist.</returns>
        </member>
        <member name="M:Agenda.Data.Crud.IAgendaData.UpdateCommitteeAsync(Agenda.Utilities.Models.Whos.IWho,Agenda.Domain.DomainObjects.Committees.ICommittee)">
            <summary>
            Updates the Committee.
            </summary>
            <param name="who">Who details.</param>
            <param name="committee">The committee.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Agenda.Data.Crud.IAgendaData.CreateLocationAsync(Agenda.Utilities.Models.Whos.IWho,Agenda.Domain.DomainObjects.Locations.ILocation)">
            <summary>
            Creates the Location.
            </summary>
            <param name="who">Who details.</param>
            <param name="location">Location.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Agenda.Data.Crud.IAgendaData.GetLocationByIdAsync(Agenda.Utilities.Models.Whos.IWho,System.Guid)">
            <summary>
            Gets the Location by Id.
            </summary>
            <param name="who">Who details.</param>
            <param name="locationId">Location Id.</param>
            <returns>Location.</returns>
        </member>
        <member name="M:Agenda.Data.Crud.IAgendaData.UpdateLocationAsync(Agenda.Utilities.Models.Whos.IWho,Agenda.Domain.DomainObjects.Locations.ILocation)">
            <summary>
            Updates the Location.
            </summary>
            <param name="who">Who details.</param>
            <param name="location">The Location.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Agenda.Data.Crud.IAgendaData.CreateMeetingAsync(Agenda.Utilities.Models.Whos.IWho,Agenda.Domain.DomainObjects.Meetings.IMeeting)">
            <summary>
            Creates the Meeting.
            </summary>
            <param name="who">Who details.</param>
            <param name="meeting">Meeting.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Agenda.Data.Crud.IAgendaData.GetMeetingByIdAsync(Agenda.Utilities.Models.Whos.IWho,System.Guid)">
            <summary>
            Gets the Meeting by Id.
            </summary>
            <param name="who">Who details.</param>
            <param name="meetingId">Meeting Id.</param>
            <returns>Meeting.</returns>
        </member>
        <member name="M:Agenda.Data.Crud.IAgendaData.GetRecentMeetingsMostRecentFirstAsync(Agenda.Utilities.Models.Whos.IWho,System.TimeSpan,System.Int32)">
            <summary>
            Gets the recent meetings with the most recent first.
            </summary>
            <param name="who">Who details.</param>
            <param name="timeSpan">The time span define what is recent.</param>
            <param name="maxNumberOfMeetings">The maximum number of meetings to return.</param>
            <returns>List of Meetings.</returns>
        </member>
        <member name="M:Agenda.Data.Crud.IAgendaData.UpdateMeetingAsync(Agenda.Utilities.Models.Whos.IWho,Agenda.Domain.DomainObjects.Meetings.IMeeting)">
            <summary>
            Updates the Meeting.
            </summary>
            <param name="who">Who details.</param>
            <param name="meeting">Meeting.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Agenda.Data.Crud.IAgendaData.CreateOrganisationAsync(Agenda.Utilities.Models.Whos.IWho,Agenda.Domain.DomainObjects.Organisations.IOrganisation)">
            <summary>
            Creates the Organisation.
            </summary>
            <param name="who">Who details.</param>
            <param name="organisation">Organisation.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Agenda.Data.Crud.IAgendaData.GetAllOrganisationsAsync(Agenda.Utilities.Models.Whos.IWho)">
            <summary>
            Gets all organisations.
            </summary>
            <param name="who">Who details.</param>
            <returns>List of Organisations.</returns>
        </member>
        <member name="M:Agenda.Data.Crud.IAgendaData.GetOrganisationByIdAsync(Agenda.Utilities.Models.Whos.IWho,System.Guid)">
            <summary>
            Gets the Organisation by Id.
            </summary>
            <param name="who">Who details.</param>
            <param name="organisationId">Organisation Id.</param>
            <returns>Organisation (Null=Not Found).</returns>
        </member>
        <member name="M:Agenda.Data.Crud.IAgendaData.GetOrganisationByIdWithCommitteesAsync(Agenda.Utilities.Models.Whos.IWho,System.Guid)">
            <summary>
            Gets the Organisation by Id with its Committees.
            </summary>
            <param name="who">Who details.</param>
            <param name="organisationId">Organisation Id.</param>
            <returns>Organisation (Null=Not Found).</returns>
        </member>
        <member name="M:Agenda.Data.Crud.IAgendaData.GetOrganisationByIdWithLocationsAsync(Agenda.Utilities.Models.Whos.IWho,System.Guid)">
            <summary>
            Gets the Organisation by Id with its Locations.
            </summary>
            <param name="who">Who details.</param>
            <param name="organisationId">Organisation Id.</param>
            <returns>Organisation with Locations.</returns>
        </member>
        <member name="M:Agenda.Data.Crud.IAgendaData.GetOrganisationByCommitteeIdWithLocationsAsync(Agenda.Utilities.Models.Whos.IWho,System.Guid)">
            <summary>
            Gets the Organisation by Committee Id with its Locations.
            </summary>
            <param name="who">Who details.</param>
            <param name="committeeId">Committee Id.</param>
            <returns>Organisation with Locations.</returns>
        </member>
        <member name="M:Agenda.Data.Crud.IAgendaData.GetOrganisationByMeetingIdWithLocationsAsync(Agenda.Utilities.Models.Whos.IWho,System.Guid)">
            <summary>
            Gets the Organisation by Meeting Id with its Locations.
            </summary>
            <param name="who">Who details.</param>
            <param name="meetingId">MeetingId Id.</param>
            <returns>Organisation with Locations.</returns>
        </member>
        <member name="M:Agenda.Data.Crud.IAgendaData.HaveOrganisationsAsync(Agenda.Utilities.Models.Whos.IWho)">
            <summary>
            Checks if we have Organisations.
            </summary>
            <param name="who">Who details.</param>
            <returns>True if Organisations exist.</returns>
        </member>
        <member name="M:Agenda.Data.Crud.IAgendaData.UpdateOrganisationAsync(Agenda.Utilities.Models.Whos.IWho,Agenda.Domain.DomainObjects.Organisations.IOrganisation)">
            <summary>
            Updates the Organisation.
            </summary>
            <param name="who">Who details.</param>
            <param name="organisation">Organisation.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="T:Agenda.Data.DbContexts.DataContext">
            <summary>
            Database Context.
            </summary>
            <seealso cref="T:Microsoft.EntityFrameworkCore.DbContext" />
            <summary>
            Database Context - DB Sets.
            </summary>
            <seealso cref="T:Microsoft.EntityFrameworkCore.DbContext" />
        </member>
        <member name="M:Agenda.Data.DbContexts.DataContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Agenda.Data.DbContexts.DataContext"/> class.
            </summary>
            <param name="options">DBContext Options.</param>
        </member>
        <member name="M:Agenda.Data.DbContexts.DataContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Override this method to further configure the model that was discovered by convention from the entity types
            exposed in dbset properties on your derived context. The resulting model may be cached
            and re-used for subsequent instances of your derived context.
            </summary>
            <param name="modelBuilder">The builder being used to construct the model for this context. Databases (and other extensions) typically
            define extension methods on this object that allow you to configure aspects of the model that are specific
            to a given database.</param>
            <exception cref="T:System.ArgumentNullException">modelBuilder.</exception>
            <remarks>
            If a model is explicitly set on the options for this context" />)
            then this method will not be run.
            </remarks>
        </member>
        <member name="P:Agenda.Data.DbContexts.DataContext.Committees">
            <summary>
            Gets or sets the Committees.
            </summary>
        </member>
        <member name="P:Agenda.Data.DbContexts.DataContext.Locations">
            <summary>
            Gets or sets the Locations.
            </summary>
        </member>
        <member name="P:Agenda.Data.DbContexts.DataContext.Meetings">
            <summary>
            Gets or sets the Meetings.
            </summary>
        </member>
        <member name="P:Agenda.Data.DbContexts.DataContext.Organisations">
            <summary>
            Gets or sets the Organisations.
            </summary>
        </member>
        <member name="T:Agenda.Data.Dtos.CommitteeDto">
            <summary>
            Committee DTO.
            </summary>
        </member>
        <member name="M:Agenda.Data.Dtos.CommitteeDto.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Agenda.Data.Dtos.CommitteeDto"/> class.
            </summary>
        </member>
        <member name="M:Agenda.Data.Dtos.CommitteeDto.#ctor(System.Guid,System.Guid,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Agenda.Data.Dtos.CommitteeDto"/> class.
            </summary>
            <param name="id">Committee Id.</param>
            <param name="organisationId">Organisation Id.</param>
            <param name="name">Committee Name.</param>
            <param name="description">Committee Description.</param>
        </member>
        <member name="M:Agenda.Data.Dtos.CommitteeDto.#ctor(System.Guid,System.Guid,System.String,System.String,Agenda.Data.Dtos.OrganisationDto)">
            <summary>
            Initializes a new instance of the <see cref="T:Agenda.Data.Dtos.CommitteeDto"/> class.
            </summary>
            <param name="id">Committee Id.</param>
            <param name="organisationId">Organisation Id.</param>
            <param name="name">Committee Name.</param>
            <param name="description">Committee Description.</param>
            <param name="organisation">Organisation.</param>
        </member>
        <member name="P:Agenda.Data.Dtos.CommitteeDto.Id">
            <summary>
            Gets the Committee Id.
            </summary>
        </member>
        <member name="P:Agenda.Data.Dtos.CommitteeDto.OrganisationId">
            <summary>
            Gets the Organisation Id.
            </summary>
        </member>
        <member name="P:Agenda.Data.Dtos.CommitteeDto.Name">
            <summary>
            Gets the Committee Name.
            </summary>
        </member>
        <member name="P:Agenda.Data.Dtos.CommitteeDto.Description">
            <summary>
            Gets the Committee Description.
            </summary>
        </member>
        <member name="P:Agenda.Data.Dtos.CommitteeDto.Organisation">
            <summary>
            Gets the Organisation.
            </summary>
        </member>
        <member name="P:Agenda.Data.Dtos.CommitteeDto.Meetings">
            <summary>
            Gets the Meetings.
            </summary>
        </member>
        <member name="M:Agenda.Data.Dtos.CommitteeDto.ToDto(Agenda.Domain.DomainObjects.Committees.ICommittee)">
            <summary>
            Converts domain object to DTO.
            </summary>
            <param name="committee">Committee.</param>
            <returns>Committee DTO.</returns>
        </member>
        <member name="M:Agenda.Data.Dtos.CommitteeDto.ToDomain">
            <summary>
            Converts instance to domain object.
            </summary>
            <returns>Committee.</returns>
        </member>
        <member name="M:Agenda.Data.Dtos.CommitteeDto.ToDomainWithMeetings">
            <summary>
            Converts instance to domain object with meetings.
            </summary>
            <returns>Committee with Meetings.</returns>
        </member>
        <member name="T:Agenda.Data.Dtos.LocationDto">
            <summary>
            Location DTO.
            </summary>
        </member>
        <member name="M:Agenda.Data.Dtos.LocationDto.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Agenda.Data.Dtos.LocationDto"/> class.
            </summary>
        </member>
        <member name="M:Agenda.Data.Dtos.LocationDto.#ctor(System.Guid,System.Guid,System.String,System.String,System.String,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Agenda.Data.Dtos.LocationDto"/> class.
            </summary>
            <param name="id">Location Id.</param>
            <param name="organisationId">Organisation Id.</param>
            <param name="name">Location Name.</param>
            <param name="address">Address.</param>
            <param name="what3Words">What3Words Address.</param>
            <param name="latitude">Latitude.</param>
            <param name="longitude">Longitude.</param>
        </member>
        <member name="M:Agenda.Data.Dtos.LocationDto.#ctor(System.Guid,System.Guid,System.String,System.String,System.String,System.Double,System.Double,Agenda.Data.Dtos.OrganisationDto)">
            <summary>
            Initializes a new instance of the <see cref="T:Agenda.Data.Dtos.LocationDto"/> class.
            </summary>
            <param name="id">Location Id.</param>
            <param name="organisationId">Organisation Id.</param>
            <param name="name">Location Name.</param>
            <param name="address">Address.</param>
            <param name="what3Words">What3Words Address.</param>
            <param name="latitude">Latitude.</param>
            <param name="longitude">Longitude.</param>
            <param name="organisation">Organisation.</param>
        </member>
        <member name="P:Agenda.Data.Dtos.LocationDto.Id">
            <summary>
            Gets the Location Id.
            </summary>
        </member>
        <member name="P:Agenda.Data.Dtos.LocationDto.OrganisationId">
            <summary>
            Gets the Organisation Id.
            </summary>
        </member>
        <member name="P:Agenda.Data.Dtos.LocationDto.Name">
            <summary>
            Gets the Committee Name.
            </summary>
        </member>
        <member name="P:Agenda.Data.Dtos.LocationDto.Address">
            <summary>
            Gets the Address.
            </summary>
        </member>
        <member name="P:Agenda.Data.Dtos.LocationDto.What3Words">
            <summary>
            Gets the What3Word Address.
            </summary>
        </member>
        <member name="P:Agenda.Data.Dtos.LocationDto.Latitude">
            <summary>
            Gets the Latitude.
            </summary>
        </member>
        <member name="P:Agenda.Data.Dtos.LocationDto.Longitude">
            <summary>
            Gets the Longitude.
            </summary>
        </member>
        <member name="P:Agenda.Data.Dtos.LocationDto.Organisation">
            <summary>
            Gets the Organisation.
            </summary>
        </member>
        <member name="M:Agenda.Data.Dtos.LocationDto.ToDto(Agenda.Domain.DomainObjects.Locations.ILocation)">
            <summary>
            Converts domain object to DTO.
            </summary>
            <param name="location">Location.</param>
            <returns>Committee DTO.</returns>
        </member>
        <member name="M:Agenda.Data.Dtos.LocationDto.ToDomain">
            <summary>
            Converts instance to domain object.
            </summary>
            <returns>Location.</returns>
        </member>
        <member name="T:Agenda.Data.Dtos.MeetingDto">
            <summary>
            Organiser DTO.
            </summary>
        </member>
        <member name="M:Agenda.Data.Dtos.MeetingDto.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Agenda.Data.Dtos.MeetingDto"/> class.
            </summary>
        </member>
        <member name="M:Agenda.Data.Dtos.MeetingDto.#ctor(System.Guid,System.Guid,System.Guid,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Agenda.Data.Dtos.MeetingDto"/> class.
            </summary>
            <param name="id">Meeting Id.</param>
            <param name="committeeId">Committee Id.</param>
            <param name="locationId">Location.</param>
            <param name="meetingDateTime">Date and Time of the Meeting.</param>
        </member>
        <member name="M:Agenda.Data.Dtos.MeetingDto.#ctor(System.Guid,System.Guid,System.Guid,System.DateTime,Agenda.Data.Dtos.CommitteeDto,Agenda.Data.Dtos.LocationDto)">
            <summary>
            Initializes a new instance of the <see cref="T:Agenda.Data.Dtos.MeetingDto"/> class.
            </summary>
            <param name="id">Meeting Id.</param>
            <param name="committeeId">Committee Id.</param>
            <param name="locationId">Location Id.</param>
            <param name="meetingDateTime">Date and Time of the Meeting.</param>
            <param name="committee">Committee.</param>
            <param name="location">Location.</param>
        </member>
        <member name="P:Agenda.Data.Dtos.MeetingDto.Id">
            <summary>
            Gets the Meeting Id.
            </summary>
        </member>
        <member name="P:Agenda.Data.Dtos.MeetingDto.CommitteeId">
            <summary>
            Gets the Committee Id.
            </summary>
        </member>
        <member name="P:Agenda.Data.Dtos.MeetingDto.MeetingDateTime">
            <summary>
            Gets the Date and Time of the Meeting.
            </summary>
        </member>
        <member name="P:Agenda.Data.Dtos.MeetingDto.LocationId">
            <summary>
            Gets the Location.
            </summary>
        </member>
        <member name="P:Agenda.Data.Dtos.MeetingDto.Committee">
            <summary>
            Gets the Committee.
            </summary>
        </member>
        <member name="P:Agenda.Data.Dtos.MeetingDto.Location">
            <summary>
            Gets the Location.
            </summary>
        </member>
        <member name="M:Agenda.Data.Dtos.MeetingDto.ToDto(Agenda.Domain.DomainObjects.Meetings.IMeeting)">
            <summary>
            Converts domain object to DTO.
            </summary>
            <param name="meeting">Meeting.</param>
            <returns>Organisation DTO.</returns>
        </member>
        <member name="M:Agenda.Data.Dtos.MeetingDto.ToDomain">
            <summary>
            Converts instance to domain object.
            </summary>
            <returns>Meeting.</returns>
        </member>
        <member name="T:Agenda.Data.Dtos.OrganisationDto">
            <summary>
            Organiser DTO.
            </summary>
        </member>
        <member name="M:Agenda.Data.Dtos.OrganisationDto.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Agenda.Data.Dtos.OrganisationDto"/> class.
            </summary>
        </member>
        <member name="M:Agenda.Data.Dtos.OrganisationDto.#ctor(System.Guid,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Agenda.Data.Dtos.OrganisationDto"/> class.
            </summary>
            <param name="id">Organisation Id.</param>
            <param name="code">Organisation Code.</param>
            <param name="name">Organisation Name.</param>
        </member>
        <member name="P:Agenda.Data.Dtos.OrganisationDto.Id">
            <summary>
            Gets the Organisation Id.
            </summary>
        </member>
        <member name="P:Agenda.Data.Dtos.OrganisationDto.Code">
            <summary>
            Gets the Organisation Code.
            </summary>
        </member>
        <member name="P:Agenda.Data.Dtos.OrganisationDto.Name">
            <summary>
            Gets the Organisation Name.
            </summary>
        </member>
        <member name="P:Agenda.Data.Dtos.OrganisationDto.Committees">
            <summary>
            Gets the Committees.
            </summary>
        </member>
        <member name="P:Agenda.Data.Dtos.OrganisationDto.Locations">
            <summary>
            Gets the Locations.
            </summary>
        </member>
        <member name="M:Agenda.Data.Dtos.OrganisationDto.ToDto(Agenda.Domain.DomainObjects.Organisations.IOrganisation)">
            <summary>
            Converts domain object to DTO.
            </summary>
            <param name="organisation">Organisation.</param>
            <returns>Organisation DTO.</returns>
        </member>
        <member name="M:Agenda.Data.Dtos.OrganisationDto.ToDomain">
            <summary>
            Converts instance to domain object.
            </summary>
            <returns>Organisation.</returns>
        </member>
        <member name="M:Agenda.Data.Dtos.OrganisationDto.ToDomainWithCommittees">
            <summary>
            Converts to domain object with committees.
            </summary>
            <returns>Organisation with Committees.</returns>
        </member>
        <member name="M:Agenda.Data.Dtos.OrganisationDto.ToDomainWithLocations">
            <summary>
            Converts to domain object with locations.
            </summary>
            <returns>Organisation with Locations.</returns>
        </member>
        <member name="T:Agenda.Data.Resources.ExceptionResource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Agenda.Data.Resources.ExceptionResource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Agenda.Data.Resources.ExceptionResource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Agenda.Data.Resources.ExceptionResource.CannotConvertTo___If___IsNull">
            <summary>
              Looks up a localized string similar to Cannot convert to {0} if {1} is Null.
            </summary>
        </member>
        <member name="T:Agenda.Data.Resources.LoggerResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Agenda.Data.Resources.LoggerResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Agenda.Data.Resources.LoggerResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Agenda.Data.Resources.LoggerResources.___EntryBy___">
            <summary>
              Looks up a localized string similar to {Method} ENTRY by {@Who}.
            </summary>
        </member>
    </members>
</doc>
