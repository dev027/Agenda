<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Agenda.Service</name>
    </assembly>
    <members>
        <member name="T:Agenda.Service.AgendaService">
            <summary>
            Service Layer - General.
            </summary>
            <seealso cref="T:Agenda.Service.IAgendaService" />
            <summary>
            Service Layer - Committee.
            </summary>
            <seealso cref="T:Agenda.Service.IAgendaService" />
            <summary>
            Service Layer - Location.
            </summary>
            <seealso cref="T:Agenda.Service.IAgendaService" />
            <summary>
            Service Layer - Meeting.
            </summary>
            <seealso cref="T:Agenda.Service.IAgendaService" />
            <summary>
            Service Layer - Organisation.
            </summary>
            <seealso cref="T:Agenda.Service.IAgendaService" />
        </member>
        <member name="M:Agenda.Service.AgendaService.#ctor(Microsoft.Extensions.Logging.ILogger{Agenda.Service.AgendaService},Agenda.Data.Crud.IAgendaData)">
            <summary>
            Initializes a new instance of the <see cref="T:Agenda.Service.AgendaService"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="data">The data layer.</param>
        </member>
        <member name="M:Agenda.Service.AgendaService.GetSetupStatusAsync(Agenda.Utilities.Models.Whos.IWho)">
            <inheritdoc/>
        </member>
        <member name="M:Agenda.Service.AgendaService.CreateCommitteeAsync(Agenda.Utilities.Models.Whos.IWho,Agenda.Domain.DomainObjects.Committees.ICommittee)">
            <inheritdoc/>
        </member>
        <member name="M:Agenda.Service.AgendaService.GetCommitteeByIdAsync(Agenda.Utilities.Models.Whos.IWho,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:Agenda.Service.AgendaService.GetCommitteeByIdWithMeetingsAsync(Agenda.Utilities.Models.Whos.IWho,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:Agenda.Service.AgendaService.UpdateCommitteeAsync(Agenda.Utilities.Models.Whos.IWho,Agenda.Domain.DomainObjects.Committees.ICommittee)">
            <inheritdoc/>
        </member>
        <member name="M:Agenda.Service.AgendaService.CreateMeetingAsync(Agenda.Utilities.Models.Whos.IWho,Agenda.Domain.DomainObjects.Meetings.IMeeting)">
            <inheritdoc/>
        </member>
        <member name="M:Agenda.Service.AgendaService.GetMeetingByIdAsync(Agenda.Utilities.Models.Whos.IWho,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:Agenda.Service.AgendaService.GetRecentMeetingsMostRecentFirstAsync(Agenda.Utilities.Models.Whos.IWho,System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:Agenda.Service.AgendaService.UpdateMeetingAsync(Agenda.Utilities.Models.Whos.IWho,Agenda.Domain.DomainObjects.Meetings.IMeeting)">
            <inheritdoc/>
        </member>
        <member name="M:Agenda.Service.AgendaService.CreateOrganisationAsync(Agenda.Utilities.Models.Whos.IWho,Agenda.Domain.DomainObjects.Organisations.IOrganisation)">
            <inheritdoc/>
        </member>
        <member name="M:Agenda.Service.AgendaService.GetAllOrganisationsAsync(Agenda.Utilities.Models.Whos.IWho)">
            <inheritdoc/>
        </member>
        <member name="M:Agenda.Service.AgendaService.GetOrganisationByIdAsync(Agenda.Utilities.Models.Whos.IWho,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:Agenda.Service.AgendaService.GetOrganisationByIdWithCommitteesAsync(Agenda.Utilities.Models.Whos.IWho,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:Agenda.Service.AgendaService.UpdateOrganisationAsync(Agenda.Utilities.Models.Whos.IWho,Agenda.Domain.DomainObjects.Organisations.IOrganisation)">
            <inheritdoc/>
        </member>
        <member name="T:Agenda.Service.IAgendaService">
            <summary>
            Service Layer.
            </summary>
            <summary>
            Service Layer - Committee.
            </summary>
            <summary>
            Service Layer - Location.
            </summary>
            <summary>
            Service Layer - Meeting.
            </summary>
            <summary>
            Service Layer - Organisation.
            </summary>
        </member>
        <member name="M:Agenda.Service.IAgendaService.GetSetupStatusAsync(Agenda.Utilities.Models.Whos.IWho)">
            <summary>
            Gets the setup status.
            </summary>
            <param name="who">Who Details.</param>
            <returns>Setup status.</returns>
        </member>
        <member name="M:Agenda.Service.IAgendaService.CreateCommitteeAsync(Agenda.Utilities.Models.Whos.IWho,Agenda.Domain.DomainObjects.Committees.ICommittee)">
            <summary>
            Creates the committee.
            </summary>
            <param name="who">Who Details.</param>
            <param name="committee">Committee.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Agenda.Service.IAgendaService.GetCommitteeByIdAsync(Agenda.Utilities.Models.Whos.IWho,System.Guid)">
            <summary>
            Gets the Committee by Id.
            </summary>
            <param name="who">Who Details.</param>
            <param name="committeeId">Committee Id.</param>
            <returns>Committee.</returns>
        </member>
        <member name="M:Agenda.Service.IAgendaService.GetCommitteeByIdWithMeetingsAsync(Agenda.Utilities.Models.Whos.IWho,System.Guid)">
            <summary>
            Gets the Committee by Id with its Meetings.
            </summary>
            <param name="who">Who Details.</param>
            <param name="committeeId">Committee Id.</param>
            <returns>Committee with Meetings.</returns>
        </member>
        <member name="M:Agenda.Service.IAgendaService.UpdateCommitteeAsync(Agenda.Utilities.Models.Whos.IWho,Agenda.Domain.DomainObjects.Committees.ICommittee)">
            <summary>
            Updates the Committee.
            </summary>
            <param name="who">Who Details.</param>
            <param name="committee">Committee to update.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Agenda.Service.IAgendaService.CreateMeetingAsync(Agenda.Utilities.Models.Whos.IWho,Agenda.Domain.DomainObjects.Meetings.IMeeting)">
            <summary>
            Creates the Meeting.
            </summary>
            <param name="who">Who Details.</param>
            <param name="meeting">Meeting.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Agenda.Service.IAgendaService.GetMeetingByIdAsync(Agenda.Utilities.Models.Whos.IWho,System.Guid)">
            <summary>
            Gets the Meeting by Id.
            </summary>
            <param name="who">Who Details.</param>
            <param name="meetingId">Meeting Id.</param>
            <returns>Meeting.</returns>
        </member>
        <member name="M:Agenda.Service.IAgendaService.GetRecentMeetingsMostRecentFirstAsync(Agenda.Utilities.Models.Whos.IWho,System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
            <summary>
            Gets the recent meetings most recent first.
            </summary>
            <param name="who">Who Details.</param>
            <param name="timeSpan">The time span.</param>
            <param name="maxNumberOfMeetings">The maximum number of meetings.</param>
            <returns>List of recent meetings.</returns>
        </member>
        <member name="M:Agenda.Service.IAgendaService.UpdateMeetingAsync(Agenda.Utilities.Models.Whos.IWho,Agenda.Domain.DomainObjects.Meetings.IMeeting)">
            <summary>
            Updates the Meeting.
            </summary>
            <param name="who">Who Details.</param>
            <param name="meeting">Meeting.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Agenda.Service.IAgendaService.CreateOrganisationAsync(Agenda.Utilities.Models.Whos.IWho,Agenda.Domain.DomainObjects.Organisations.IOrganisation)">
            <summary>
            Creates the organisation.
            </summary>
            <param name="who">Who Details.</param>
            <param name="organisation">Organisation.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Agenda.Service.IAgendaService.GetAllOrganisationsAsync(Agenda.Utilities.Models.Whos.IWho)">
            <summary>
            Gets all Organisations.
            </summary>
            <param name="who">Who Details.</param>
            <returns>List of Organisations.</returns>
        </member>
        <member name="M:Agenda.Service.IAgendaService.GetOrganisationByIdAsync(Agenda.Utilities.Models.Whos.IWho,System.Guid)">
            <summary>
            Gets the Organisation by Id.
            </summary>
            <param name="who">Who Details.</param>
            <param name="organisationId">Organisation Id.</param>
            <returns>Organisation.</returns>
        </member>
        <member name="M:Agenda.Service.IAgendaService.GetOrganisationByIdWithCommitteesAsync(Agenda.Utilities.Models.Whos.IWho,System.Guid)">
            <summary>
            Gets the Organisation by Id with its Committees.
            </summary>
            <param name="who">Who Details.</param>
            <param name="organisationId">Organisation Id.</param>
            <returns>Organisation.</returns>
        </member>
        <member name="M:Agenda.Service.IAgendaService.UpdateOrganisationAsync(Agenda.Utilities.Models.Whos.IWho,Agenda.Domain.DomainObjects.Organisations.IOrganisation)">
            <summary>
            Updates the Organisation.
            </summary>
            <param name="who">Who Details.</param>
            <param name="organisation">Organisation to update.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="T:Agenda.Service.Resources.LoggerResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Agenda.Service.Resources.LoggerResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Agenda.Service.Resources.LoggerResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Agenda.Service.Resources.LoggerResources.___EntryBy___">
            <summary>
              Looks up a localized string similar to {Method} ENTRY by {@Who}.
            </summary>
        </member>
    </members>
</doc>
